//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eletronics.WEB.ClientService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientService.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddClient", ReplyAction="http://tempuri.org/IClientService/AddClientResponse")]
        void AddClient(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddClient", ReplyAction="http://tempuri.org/IClientService/AddClientResponse")]
        System.Threading.Tasks.Task AddClientAsync(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/RemoveClient", ReplyAction="http://tempuri.org/IClientService/RemoveClientResponse")]
        void RemoveClient(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/RemoveClient", ReplyAction="http://tempuri.org/IClientService/RemoveClientResponse")]
        System.Threading.Tasks.Task RemoveClientAsync(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateClient", ReplyAction="http://tempuri.org/IClientService/UpdateClientResponse")]
        void UpdateClient(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateClient", ReplyAction="http://tempuri.org/IClientService/UpdateClientResponse")]
        System.Threading.Tasks.Task UpdateClientAsync(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/FindAll", ReplyAction="http://tempuri.org/IClientService/FindAllResponse")]
        Eletronicos.Model.Client[] FindAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/FindAll", ReplyAction="http://tempuri.org/IClientService/FindAllResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.Client[]> FindAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Find", ReplyAction="http://tempuri.org/IClientService/FindResponse")]
        Eletronicos.Model.Client Find(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Find", ReplyAction="http://tempuri.org/IClientService/FindResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.Client> FindAsync(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/FindDescription", ReplyAction="http://tempuri.org/IClientService/FindDescriptionResponse")]
        Eletronicos.Model.ClientType FindDescription(Eletronicos.Model.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/FindDescription", ReplyAction="http://tempuri.org/IClientService/FindDescriptionResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.ClientType> FindDescriptionAsync(Eletronicos.Model.ClientType clientType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/FindAllClientTypes", ReplyAction="http://tempuri.org/IClientService/FindAllClientTypesResponse")]
        Eletronicos.Model.ClientType[] FindAllClientTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/FindAllClientTypes", ReplyAction="http://tempuri.org/IClientService/FindAllClientTypesResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.ClientType[]> FindAllClientTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/FindClientsByFilter", ReplyAction="http://tempuri.org/IClientService/FindClientsByFilterResponse")]
        Eletronicos.Model.Client[] FindClientsByFilter(Eletronicos.Model.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/FindClientsByFilter", ReplyAction="http://tempuri.org/IClientService/FindClientsByFilterResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.Client[]> FindClientsByFilterAsync(Eletronicos.Model.Client client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : Eletronics.WEB.ClientService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<Eletronics.WEB.ClientService.IClientService>, Eletronics.WEB.ClientService.IClientService {
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddClient(Eletronicos.Model.Client client) {
            base.Channel.AddClient(client);
        }
        
        public System.Threading.Tasks.Task AddClientAsync(Eletronicos.Model.Client client) {
            return base.Channel.AddClientAsync(client);
        }
        
        public void RemoveClient(Eletronicos.Model.Client client) {
            base.Channel.RemoveClient(client);
        }
        
        public System.Threading.Tasks.Task RemoveClientAsync(Eletronicos.Model.Client client) {
            return base.Channel.RemoveClientAsync(client);
        }
        
        public void UpdateClient(Eletronicos.Model.Client client) {
            base.Channel.UpdateClient(client);
        }
        
        public System.Threading.Tasks.Task UpdateClientAsync(Eletronicos.Model.Client client) {
            return base.Channel.UpdateClientAsync(client);
        }
        
        public Eletronicos.Model.Client[] FindAll() {
            return base.Channel.FindAll();
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.Client[]> FindAllAsync() {
            return base.Channel.FindAllAsync();
        }
        
        public Eletronicos.Model.Client Find(Eletronicos.Model.Client client) {
            return base.Channel.Find(client);
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.Client> FindAsync(Eletronicos.Model.Client client) {
            return base.Channel.FindAsync(client);
        }
        
        public Eletronicos.Model.ClientType FindDescription(Eletronicos.Model.ClientType clientType) {
            return base.Channel.FindDescription(clientType);
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.ClientType> FindDescriptionAsync(Eletronicos.Model.ClientType clientType) {
            return base.Channel.FindDescriptionAsync(clientType);
        }
        
        public Eletronicos.Model.ClientType[] FindAllClientTypes() {
            return base.Channel.FindAllClientTypes();
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.ClientType[]> FindAllClientTypesAsync() {
            return base.Channel.FindAllClientTypesAsync();
        }
        
        public Eletronicos.Model.Client[] FindClientsByFilter(Eletronicos.Model.Client client) {
            return base.Channel.FindClientsByFilter(client);
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.Client[]> FindClientsByFilterAsync(Eletronicos.Model.Client client) {
            return base.Channel.FindClientsByFilterAsync(client);
        }
    }
}
