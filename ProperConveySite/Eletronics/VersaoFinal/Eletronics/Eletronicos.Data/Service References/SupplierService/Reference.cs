//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eletronicos.Data.SupplierService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SupplierService.ISupplierService")]
    public interface ISupplierService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/Insert", ReplyAction="http://tempuri.org/ISupplierService/InsertResponse")]
        void Insert(Eletronicos.Model.Supplier objectToBeInserted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/Insert", ReplyAction="http://tempuri.org/ISupplierService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(Eletronicos.Model.Supplier objectToBeInserted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/Delete", ReplyAction="http://tempuri.org/ISupplierService/DeleteResponse")]
        void Delete(Eletronicos.Model.Supplier objectToBeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/Delete", ReplyAction="http://tempuri.org/ISupplierService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(Eletronicos.Model.Supplier objectToBeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/Update", ReplyAction="http://tempuri.org/ISupplierService/UpdateResponse")]
        void Update(Eletronicos.Model.Supplier objectToBeUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/Update", ReplyAction="http://tempuri.org/ISupplierService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(Eletronicos.Model.Supplier objectToBeUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/FindAllSuppliers", ReplyAction="http://tempuri.org/ISupplierService/FindAllSuppliersResponse")]
        Eletronicos.Model.Supplier[] FindAllSuppliers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/FindAllSuppliers", ReplyAction="http://tempuri.org/ISupplierService/FindAllSuppliersResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.Supplier[]> FindAllSuppliersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/Find", ReplyAction="http://tempuri.org/ISupplierService/FindResponse")]
        Eletronicos.Model.Supplier Find(Eletronicos.Model.Supplier objectToBeFound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/Find", ReplyAction="http://tempuri.org/ISupplierService/FindResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.Supplier> FindAsync(Eletronicos.Model.Supplier objectToBeFound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/FindAllSupplierTypes", ReplyAction="http://tempuri.org/ISupplierService/FindAllSupplierTypesResponse")]
        Eletronicos.Model.SupplierType[] FindAllSupplierTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/FindAllSupplierTypes", ReplyAction="http://tempuri.org/ISupplierService/FindAllSupplierTypesResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.SupplierType[]> FindAllSupplierTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/FindTypeDescription", ReplyAction="http://tempuri.org/ISupplierService/FindTypeDescriptionResponse")]
        string FindTypeDescription(int supplierTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/FindTypeDescription", ReplyAction="http://tempuri.org/ISupplierService/FindTypeDescriptionResponse")]
        System.Threading.Tasks.Task<string> FindTypeDescriptionAsync(int supplierTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/FindSuppliersByFilter", ReplyAction="http://tempuri.org/ISupplierService/FindSuppliersByFilterResponse")]
        Eletronicos.Model.Supplier[] FindSuppliersByFilter(Eletronicos.Model.Supplier supplierFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISupplierService/FindSuppliersByFilter", ReplyAction="http://tempuri.org/ISupplierService/FindSuppliersByFilterResponse")]
        System.Threading.Tasks.Task<Eletronicos.Model.Supplier[]> FindSuppliersByFilterAsync(Eletronicos.Model.Supplier supplierFilter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISupplierServiceChannel : Eletronicos.Data.SupplierService.ISupplierService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SupplierServiceClient : System.ServiceModel.ClientBase<Eletronicos.Data.SupplierService.ISupplierService>, Eletronicos.Data.SupplierService.ISupplierService {
        
        public SupplierServiceClient() {
        }
        
        public SupplierServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SupplierServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SupplierServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SupplierServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Insert(Eletronicos.Model.Supplier objectToBeInserted) {
            base.Channel.Insert(objectToBeInserted);
        }
        
        public System.Threading.Tasks.Task InsertAsync(Eletronicos.Model.Supplier objectToBeInserted) {
            return base.Channel.InsertAsync(objectToBeInserted);
        }
        
        public void Delete(Eletronicos.Model.Supplier objectToBeDeleted) {
            base.Channel.Delete(objectToBeDeleted);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(Eletronicos.Model.Supplier objectToBeDeleted) {
            return base.Channel.DeleteAsync(objectToBeDeleted);
        }
        
        public void Update(Eletronicos.Model.Supplier objectToBeUpdated) {
            base.Channel.Update(objectToBeUpdated);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Eletronicos.Model.Supplier objectToBeUpdated) {
            return base.Channel.UpdateAsync(objectToBeUpdated);
        }
        
        public Eletronicos.Model.Supplier[] FindAllSuppliers() {
            return base.Channel.FindAllSuppliers();
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.Supplier[]> FindAllSuppliersAsync() {
            return base.Channel.FindAllSuppliersAsync();
        }
        
        public Eletronicos.Model.Supplier Find(Eletronicos.Model.Supplier objectToBeFound) {
            return base.Channel.Find(objectToBeFound);
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.Supplier> FindAsync(Eletronicos.Model.Supplier objectToBeFound) {
            return base.Channel.FindAsync(objectToBeFound);
        }
        
        public Eletronicos.Model.SupplierType[] FindAllSupplierTypes() {
            return base.Channel.FindAllSupplierTypes();
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.SupplierType[]> FindAllSupplierTypesAsync() {
            return base.Channel.FindAllSupplierTypesAsync();
        }
        
        public string FindTypeDescription(int supplierTypeID) {
            return base.Channel.FindTypeDescription(supplierTypeID);
        }
        
        public System.Threading.Tasks.Task<string> FindTypeDescriptionAsync(int supplierTypeID) {
            return base.Channel.FindTypeDescriptionAsync(supplierTypeID);
        }
        
        public Eletronicos.Model.Supplier[] FindSuppliersByFilter(Eletronicos.Model.Supplier supplierFilter) {
            return base.Channel.FindSuppliersByFilter(supplierFilter);
        }
        
        public System.Threading.Tasks.Task<Eletronicos.Model.Supplier[]> FindSuppliersByFilterAsync(Eletronicos.Model.Supplier supplierFilter) {
            return base.Channel.FindSuppliersByFilterAsync(supplierFilter);
        }
    }
}
